import sys, os.path, json, tempfile, subprocess, shlex, gzip, base64, time

def fetch(path):
    prefix = path
    if os.path.exists(prefix+'/include/ejudge') and not os.path.exists(prefix+'/new-server.h'):
        prefix += '/include/ejudge'
    try:
        with open(prefix+'/new_server_proto.h') as file: data = file.read()
    except IOError: data = ''
    if '\n  NEW_SRV_ACTION_LOGIN_PAGE = 1,\n' not in data:
        with open(prefix+'/new-server.h') as file: data = file.read()
    data = '\n'.join(i.split('//', 1)[0].rstrip() for i in data.split('\n'))
    data = ''.join(i.split('*/', 1)[1] for i in ('*/ '+data).split('/*'))[1:]
    assert '\n  NEW_SRV_ACTION_LOGIN_PAGE = 1,\n' in data
    #__import__('pydoc').pager(data)
    lines = data.split('\n')
    enum_start = lines.index('  NEW_SRV_ACTION_LOGIN_PAGE = 1,')
    assert enum_start >= 2 and lines[enum_start-2:enum_start] == ['enum', '{']
    values = []
    cur = 0
    idx = enum_start
    keys = set()
    while lines[idx] != '};':
        line = lines[idx].strip()
        idx += 1
        if not line: continue
        assert line.endswith(',')
        line = line[:-1]
        if ' = ' in line:
            key, value = line.split(' = ')
            cur = int(value)
        else:
            key = line
        assert key.replace('_', '').isalnum()
        while len(values) <= cur: values.append(None)
        assert values[cur] == None
        values[cur] = key
        cur += 1
        assert key not in keys
        keys.add(key)
    with open(path+'/db/versions') as file:
        current_version = file.read().strip().split('\n')[-1].split()
        current_version = current_version[1] + '.' + current_version[2]
    return {'version': current_version, 'actions': values}

with tempfile.TemporaryDirectory() as tdir:
    assert not subprocess.call(('git', 'clone', 'https://github.com/blackav/ejudge', tdir+'/ejudge'))
    with open(os.open(tdir+'/editor', os.O_WRONLY|os.O_CREAT|os.O_EXCL, 0o777), 'w', closefd=True) as file:
        file.write('''\
#!%s
import sys

with open(sys.argv[1]) as file: data = file.read().split('\\n')

data = [i+'\\nexec echo; read' if i.startswith('pick ') else i for i in data]

with open(sys.argv[1], 'w') as file: file.write('\\n'.join(data))
'''%sys.executable)
    os.putenv('EDITOR', tdir+'/editor')
    popen = subprocess.Popen(('git', 'rebase', '--rebase-merges', '-i', 'bdb59bb282', 'HEAD'), cwd=tdir+'/ejudge', stdin=subprocess.PIPE, stdout=subprocess.PIPE, bufsize=0)
    data = []
    while True:
        q = popen.stdout.read(1)
        if not q: break
        try: assert q == b'\n'
        except Exception:
            subprocess.call('bash', cwd=tdir+'/ejudge')
            raise
        try: chunk = fetch(tdir+'/ejudge')
        except Exception:
            subprocess.call('bash', cwd=tdir+'/ejudge')
            raise
        if not data or chunk != data[-1]:
            data.append(chunk)
        popen.stdin.write(b'\n')
        popen.stdin.flush()
    assert not popen.wait()

def lcs(a, b):
    n = len(a)
    m = len(b)
    dyn = [[(0, 0, 0)]*(m+1) for i in range(n+1)]
    for i in range(n):
        for j in range(m):
            if a[i] == b[j]:
                dyn[i+1][j+1] = (dyn[i][j][0]+1, i, j)
            else:
                dyn[i+1][j+1] = max(dyn[i][j+1], dyn[i+1][j])
    common_elements = set()
    i = n
    j = m
    while i and j:
        _, i, j = dyn[i][j]
        assert a[i] == b[j]
        common_elements.add(a[i])
    return common_elements

def format_patch(a, b):
    ans = []
    common = lcs(a, b)
    i = 0
    j = 0
    while i < len(a) or j < len(b):
        i0 = i
        while i < len(a) and a[i] not in common:
            i += 1
        if i != i0:
            ans += ('-', str(j), str(i-i0))
        if j < len(b) and b[j] not in common:
            ans += ('+', str(j))
            while j < len(b) and b[j] not in common:
                ans.append('?' if b[j] == None else b[j])
                j += 1
        if i < len(a) or j < len(b):
            assert a[i] == b[j]
            common.remove(a[i])
            i += 1
            j += 1
    assert not common
    return ans

def format_diff(a, b):
    ans = format_patch(a['actions'], b['actions'])
    if a['version'] != b['version']:
        v1 = tuple(map(int, a['version'].split('.')))
        v2 = tuple(map(int, b['version'].split('.')))
        assert v2 > v1
        ans += ('!', b['version'])
    return ' '.join(ans)

ans = []
cur = {'version': '-1', 'actions': []}

for i in sorted(data, key=lambda i: tuple(map(int, i['version'].split('.')))):
    ans.append(format_diff(cur, i))
    cur = i

print("# generated by ejudge_burger.py on %s\nimport gzip, base64\n\ndata = gzip.decompress(base64.b64decode(%r)).decode('ascii')\n"%(time.ctime(), base64.b64encode(gzip.compress(('\n'.join(i for i in ans if i)).encode('ascii')))))
